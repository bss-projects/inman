CREATE OR REPLACE FUNCTION list_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

l_right = []
l_label = []

fd = open('/tmp/test_trigger', 'a')
fd.write('list_right_freeradius' + "\n")

l_flag_level = json.loads(TD['new']['vendor_info'])['l_flag_level']
vendorname = json.loads(TD['new']['vendor_info'])['vendorname']
radiusname = json.loads(TD['new']['vendor_info'])['radiusname']

for d_level in l_flag_level :
 if d_level['label'] != 'list_flag' :
  l_label.append(d_level['label'])

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

if res:
 for row in res:
  l_right = json.loads(row['view_data'])
  uid = row['id']

 for label in l_label:
  if {'radiusname': radiusname, 'right': label} not in l_right:
   l_right.append({'radiusname': radiusname, 'right': label})

 l_right = json.dumps(l_right)
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

else :
 for label in l_label:
  if {'radiusname': radiusname, 'right': label} not in l_right:
   l_right.append({'radiusname': radiusname, 'right': label})

 l_right = json.dumps(l_right)
 res = plpy.execute("INSERT INTO matview (name, view_data) VALUES ('list_right_freeradius', '"+ l_right +"')")

$$ LANGUAGE plpythonu;

CREATE TRIGGER list_right_freeradius
AFTER INSERT ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE list_right_freeradius ();











CREATE OR REPLACE FUNCTION delete_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

flag_view_empty = False
l_right = []

fd = open('/tmp/psql/test_trigger_delete_right', 'a')

l_row_vendor_info_for_right = plpy.execute("SELECT json_build_object('radiusname', vendor_info->'radiusname', 'vendorname', vendor_info->'vendorname', 'l_flag_level', vendor_info->'l_flag_level') FROM vendor_freeradius")

l_right_matview = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

fd.write('Vendor info in DB {0}\n Right Matview {1}\n'.format(l_row_vendor_info_for_right, l_right_matview))

if l_right_matview:
 for row in l_right_matview:
  uid = row['id']
else :
 flag_view_empty = True

for vendor_with_right in l_row_vendor_info_for_right :
 row = json.loads(vendor_with_right['json_build_object'])
 fd.write('ROW {0}\n type -> {1}\n'.format(row, type(row)))
 radiusname = row['radiusname']
 l_flag_level = row['l_flag_level']

 right = {}
 for flag_level in l_flag_level:
  if flag_level['label'] != 'list_flag':
   right = {'radiusname': radiusname, 'right': flag_level['label']}
   if {'radiusname': radiusname, 'right': flag_level['label']} not in l_right:
    l_right.append(right)

fd.write('L_RIGHT {0}\n type -> {1}\n'.format(l_right, type(l_right)))

l_right = json.dumps(l_right)

if flag_view_empty:
 res = plpy.execute("INSERT INTO matview (name, view_data) VALUES ('list_right_freeradius', '"+ l_right +"')")
else:
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER delete_right_freeradius
AFTER DELETE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE delete_right_freeradius ();







CREATE OR REPLACE FUNCTION update_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

flag_view_empty = False
l_right = []

fd = open('/tmp/psql/test_trigger_update_right', 'a')

l_row_vendor_info_for_right = plpy.execute("SELECT json_build_object('radiusname', vendor_info->'radiusname', 'vendorname', vendor_info->'vendorname', 'l_flag_level', vendor_info->'l_flag_level') FROM vendor_freeradius")

l_right_matview = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

fd.write('Vendor info in DB {0}\n Right Matview {1}\n'.format(l_row_vendor_info_for_right, l_right_matview))

if l_right_matview:
 for row in l_right_matview:
  uid = row['id']
else :
 flag_view_empty = True

for vendor_with_right in l_row_vendor_info_for_right :
 row = json.loads(vendor_with_right['json_build_object'])
 fd.write('ROW {0}\n type -> {1}\n'.format(row, type(row)))
 radiusname = row['radiusname']
 l_flag_level = row['l_flag_level']

 right = {}
 for flag_level in l_flag_level:
  if flag_level['label'] != 'list_flag':
   right = {'radiusname': radiusname, 'right': flag_level['label']}
   if {'radiusname': radiusname, 'right': flag_level['label']} not in l_right:
    l_right.append(right)

fd.write('L_RIGHT {0}\n type -> {1}\n'.format(l_right, type(l_right)))

l_right = json.dumps(l_right)

if flag_view_empty:
 res = plpy.execute("INSERT INTO matview (name, view_data) VALUES ('list_right_freeradius', '"+ l_right +"')")
else:
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER update_right_freeradius
AFTER UPDATE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE update_right_freeradius ();
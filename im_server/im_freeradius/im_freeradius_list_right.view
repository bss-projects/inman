CREATE OR REPLACE FUNCTION list_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

l_right = []
l_label = []

fd = open('/tmp/test_trigger', 'a')
fd.write('list_right_freeradius' + "\n")

l_flag_level = json.loads(TD['new']['vendor_info'])['l_flag_level']
vendorname = json.loads(TD['new']['vendor_info'])['vendorname']

for d_level in l_flag_level :
 if d_level['label'] != 'list_flag' :
  l_label.append(d_level['label'])

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

if res:
 for row in res:
  l_right = json.loads(row['view_data'])
  uid = row['id']

 for label in l_label:
  if label not in l_right:
   l_right.append(label)

 l_right = json.dumps(l_right)
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

else :
 l_right += l_label
 l_right = json.dumps(l_right)
 res = plpy.execute("INSERT INTO matview (name, view_data) VALUES ('list_right_freeradius', '"+ l_right +"')")

$$ LANGUAGE plpythonu;

CREATE TRIGGER list_right_freeradius
AFTER INSERT ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE list_right_freeradius ();











CREATE OR REPLACE FUNCTION delete_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

l_right = []
l_label = []

fd = open('/tmp/test_trigger', 'a')
fd.write("\n\n")
fd.write("delete_right_freeradius\n")

l_flag_level = json.loads(TD['old']['vendor_info'])['l_flag_level']
vendorname = json.loads(TD['old']['vendor_info'])['vendorname']
uid = TD['old']['id']

OLDl_flag_level = json.loads(TD['old']['vendor_info'])['l_flag_level']
OLDvendorname = json.loads(TD['old']['vendor_info'])['vendorname']

res = plpy.execute("SELECT json_build_object('radiusname', vendor_info->'radiusname', 'vendorname', vendor_info->'vendorname', 'label', vendor_info->'l_flag_level') FROM vendor_freeradius")

if res:
 for row in res:
  fd.write(json.dumps(row) + "\n")
  l_flag = json.loads(row['json_build_object'])['label']
  for d_flag in l_flag :
   if d_flag['label'] != 'list_flag' and d_flag['label'] not in l_label:
    l_label.append(d_flag['label'])

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

if res:
 for row in res:
  uid = row['id']

 l_right = json.dumps(l_label)
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER delete_right_freeradius
AFTER DELETE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE delete_right_freeradius ();







CREATE OR REPLACE FUNCTION update_right_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

l_right = []
l_label = []

fd = open('/tmp/test_trigger', 'a')
fd.write("\n\n")
fd.write("update_right_freeradius\n")

l_flag_level = json.loads(TD['new']['vendor_info'])['l_flag_level']
vendorname = json.loads(TD['new']['vendor_info'])['vendorname']
uid = TD['new']['id']

OLDl_flag_level = json.loads(TD['old']['vendor_info'])['l_flag_level']
OLDvendorname = json.loads(TD['old']['vendor_info'])['vendorname']

res = plpy.execute("SELECT json_build_object('radiusname', vendor_info->'radiusname', 'vendorname', vendor_info->'vendorname', 'label', vendor_info->'l_flag_level') FROM vendor_freeradius")

if res:
 for row in res:
  fd.write(json.dumps(row) + "\n")
  l_flag = json.loads(row['json_build_object'])['label']
  for d_flag in l_flag :
   if d_flag['label'] != 'list_flag' and d_flag['label'] not in l_label:
    l_label.append(d_flag['label'])

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_right_freeradius'")

if res:
 for row in res:
  uid = row['id']

 l_right = json.dumps(l_label)
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_right +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER update_right_freeradius
AFTER UPDATE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE update_right_freeradius ();
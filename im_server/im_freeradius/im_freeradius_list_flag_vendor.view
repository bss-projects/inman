CREATE OR REPLACE FUNCTION list_flag_vendor_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

d_flag_vendor = {}
d_flag_vendor_tmp = {}
flag_update = False
l_flag = []
l_flag_vendor = []
uid = 0

l_block = json.loads(TD['new']['vendor_info'])['l_flag_level'][0]['l_block']
vendorname = json.loads(TD['new']['vendor_info'])['vendorname']
radiusname = json.loads(TD['new']['vendor_info'])['radiusname']

fd = open('/tmp/psql/test_trigger_insert_vendor_flag', 'a')

fd.write('New vendor with FLAG {0}\n'.format(vendorname))

for block in l_block:
 l_flag += block['list']

fd.write('Vendor FLAG {0}\n'.format(l_flag))

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_flag_vendor_freeradius'")

if res:
 for row in res:
  l_flag_vendor = json.loads(row['view_data'])
  uid = row['id']
 
 i = 0
 for d_flag_vendor in l_flag_vendor:
  if d_flag_vendor['vendorname'] == vendorname and d_flag_vendor['radiusname'] == radiusname:
   d_flag_vendor['l_flag'] = l_flag
   l_flag_vendor[i] = d_flag_vendor
   flag_update = True
   fd.write('Vendor {0} previously known\n'.format(vendorname))
   break
  i += 1

 if not flag_update :
  fd.write('Unknown vendor {0}\n'.format(vendorname))
  d_flag_vendor_tmp['vendorname'] = vendorname
  d_flag_vendor_tmp['radiusname'] = radiusname
  d_flag_vendor_tmp['l_flag'] = l_flag
  l_flag_vendor.append(d_flag_vendor_tmp)

 l_flag_vendor = json.dumps(l_flag_vendor)
 fd.write('Vendor {0} FLAG : {1}\n'.format(vendorname, l_flag_vendor))
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_flag_vendor +"') WHERE id = "+ str(uid) +"")

else:
 d_flag_vendor['vendorname'] = vendorname
 d_flag_vendor['radiusname'] = radiusname
 d_flag_vendor['l_flag'] = l_flag
 l_flag_vendor.append(d_flag_vendor)

 l_flag_vendor = json.dumps(l_flag_vendor)
 res = plpy.execute("INSERT INTO matview (name, view_data) VALUES ('list_flag_vendor_freeradius', '"+ l_flag_vendor +"')")

$$ LANGUAGE plpythonu;

CREATE TRIGGER list_flag_vendor_freeradius
AFTER INSERT ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE list_flag_vendor_freeradius();


CREATE OR REPLACE FUNCTION delete_flag_vendor_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

d_flag_vendor = {}
l_flag_vendor_tmp = []
flag_update = False
l_flag = []
l_flag_vendor = []
uid = 0

l_block = json.loads(TD['old']['vendor_info'])['l_flag_level'][0]['l_block']
vendorname = json.loads(TD['old']['vendor_info'])['vendorname']
radiusname = json.loads(TD['old']['vendor_info'])['radiusname']

fd = open('/tmp/psql/test_trigger_delete_vendor_flag', 'a')

fd.write('Delete vendor {0} with FLAG in {1}\n'.format(vendorname, radiusname))

for block in l_block:
 l_flag += block['list']

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_flag_vendor_freeradius'")

if res:
 for row in res:
  l_flag_vendor = json.loads(row['view_data'])
  uid = row['id']
 
 for d_flag_vendor in l_flag_vendor:
  fd.write('To evaluate {0} : {1}\n'.format(d_flag_vendor['radiusname'], d_flag_vendor['vendorname']))
  if d_flag_vendor['vendorname'] != vendorname or d_flag_vendor['radiusname'] != radiusname:
   l_flag_vendor_tmp.append(d_flag_vendor.copy())
   fd.write('To copy {0} : {1}\n'.format(d_flag_vendor['radiusname'], d_flag_vendor['vendorname']))

 l_flag_vendor = json.dumps(l_flag_vendor_tmp)
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_flag_vendor +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER delete_flag_vendor_freeradius
AFTER DELETE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE delete_flag_vendor_freeradius();


CREATE OR REPLACE FUNCTION update_flag_vendor_freeradius ()
RETURNS TRIGGER
AS $$

import json
import sys

d_flag_vendor = {}
d_flag_vendor_tmp = {}
flag_update = False
l_flag = []
l_flag_vendor = []
l_flag_vendor_tmp = []
uid = 0

l_block = json.loads(TD['new']['vendor_info'])['l_flag_level'][0]['l_block']
vendorname = json.loads(TD['new']['vendor_info'])['vendorname']
radiusname = json.loads(TD['new']['vendor_info'])['radiusname']

OLDl_block = json.loads(TD['old']['vendor_info'])['l_flag_level'][0]['l_block']
OLDvendorname = json.loads(TD['old']['vendor_info'])['vendorname']
OLDradiusname = json.loads(TD['old']['vendor_info'])['radiusname']

#fd = open('/tmp/test_trigger', 'a')
#fd.write(row['view_data'] + "\n")

for block in l_block:
 l_flag += block['list']

res = plpy.execute("SELECT * FROM matview WHERE name = 'list_flag_vendor_freeradius'")

if res:
 for row in res:
  l_flag_vendor = json.loads(row['view_data'])
  uid = row['id']
 
# fd.write("Previous REC" + "\n")
 i = 0
 for d_flag_vendor in l_flag_vendor:
  if d_flag_vendor['vendorname'] == vendorname and d_flag_vendor['radiusname'] == radiusname:
   d_flag_vendor['l_flag'] = l_flag
   l_flag_vendor[i] = d_flag_vendor
   flag_update = True
#   fd.write("Known vendor" + "\n")
##   break
  elif d_flag_vendor['vendorname'] == OLDvendorname and d_flag_vendor['radiusname'] == OLDradiusname:
   d_flag_vendor['vendorname'] = vendorname
   d_flag_vendor['radiusname'] = radiusname
   d_flag_vendor['l_flag'] = l_flag
   l_flag_vendor[i] = d_flag_vendor
  i += 1

## if not flag_update :
#  fd.write("Unknown vendor" + "\n")
##  for d_flag_vendor in l_flag_vendor:
##   if d_flag_vendor['vendorname'] != OLDvendorname:
##    l_flag_vendor_tmp.append(d_flag_vendor.copy())
##   elif d_flag_vendor['vendorname'] == OLDvendorname:
##    d_flag_vendor_tmp['vendorname'] = vendorname
##    d_flag_vendor_tmp['l_flag'] = l_flag
##    l_flag_vendor_tmp.append(d_flag_vendor_tmp)

 if l_flag_vendor_tmp:
  l_flag_vendor = json.dumps(l_flag_vendor_tmp)
 else :
  l_flag_vendor = json.dumps(l_flag_vendor)
# fd.write(l_flag_vendor + "\n")
 res = plpy.execute("UPDATE matview SET (view_data) = ('"+ l_flag_vendor +"') WHERE id = "+ str(uid) +"")

$$ LANGUAGE plpythonu;

CREATE TRIGGER update_flag_vendor_freeradius
AFTER UPDATE ON vendor_freeradius
FOR EACH ROW
EXECUTE PROCEDURE update_flag_vendor_freeradius();